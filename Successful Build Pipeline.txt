pipeline {
    agent any
    
    environment {
        PYTHON_VERSION = '3.8.10'  // Specify the Python version you want to use
        VENV = 'myenv'            // Name of your virtual environment
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Checkout your repository containing main.py, database.py, etc.
                git 'https://github.com/Ayansyd/sales_force_api.git'
            }
        }
        stage('Install Dependencies') {
            steps {
                    sh '''pip install -r requirements.txt'''
            }
        }
        stage('Execute Scripts') {
            steps {
                // Run your Python scripts
                    sh "python3 app.py"
                
            }
        }
    }
    
    }


---------------------------------------------------------------------------------
---------------------------------------------------------------------------------
Sample Jenkins Pipeline Script for Containerization and Deployment: :
---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------



pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE_NAME = 'my-python-app'
        DOCKER_REGISTRY_URL = 'docker.io'  // Replace with your Docker registry URL if using one
        SERVER_HOST = 'your_server_hostname_or_ip'
        SERVER_SSH_PORT = 'your_server_ssh_port'
        DEPLOY_PATH = '/path/to/deploy'
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Checkout the code repository
                git 'https://github.com/your/repository.git'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                // Build Docker image
                script {
                    sh "docker build -t ${DOCKER_IMAGE_NAME} ."
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                // Tag and push Docker image to registry or save locally
                script {
                    sh "docker tag ${DOCKER_IMAGE_NAME} ${DOCKER_REGISTRY_URL}/${DOCKER_IMAGE_NAME}"
                    sh "docker push ${DOCKER_REGISTRY_URL}/${DOCKER_IMAGE_NAME}"
                }
            }
        }
        
        stage('Deploy to Local Server') {
            steps {
                // SSH into the server and run Docker commands
                script {
                    sshScript remote: "username@${SERVER_HOST}:${SERVER_SSH_PORT}", script: """
                        ssh -o StrictHostKeyChecking=no username@${SERVER_HOST} -p ${SERVER_SSH_PORT} << 'EOF'
                            docker pull ${DOCKER_REGISTRY_URL}/${DOCKER_IMAGE_NAME}
                            docker stop ${DOCKER_IMAGE_NAME} || true
                            docker rm ${DOCKER_IMAGE_NAME} || true
                            docker run -d --name ${DOCKER_IMAGE_NAME} -p 8000:8000 ${DOCKER_REGISTRY_URL}/${DOCKER_IMAGE_NAME}
                        EOF
                    """
                }
            }
        }
    }
    
    post {
        success {
            // Example: Send notification on success
            emailext (
                subject: "Pipeline Success: ${currentBuild.fullDisplayName}",
                body: "The pipeline ${currentBuild.fullDisplayName} completed successfully.",
                recipientProviders: [emailextRecipients()]
            )
        }
        failure {
            // Example: Send notification on failure
            emailext (
                subject: "Pipeline Failure: ${currentBuild.fullDisplayName}",
                body: "The pipeline ${currentBuild.fullDisplayName} failed. Please check the logs for details.",
                recipientProviders: [emailextRecipients()]
            )
        }
    }
}

